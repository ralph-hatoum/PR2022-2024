- gather_facts: false
  hosts: Bootstrap-node
  tasks:
  - name: Make node folder
    shell: mkdir -p IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}
  - name: Make kubo folder
    shell: mkdir -p IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo
  - copy:
      dest: IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/ipfs
      src: kubo/kubo/ipfs
  - copy:
      dest: IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/node_exporter.py
      src: kubo/node_exporter.py
  - name: Authorize execution of ipfs binary
    shell: chmod u+x IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/ipfs
  - ignore_errors: true
    name: Initialize IPFS node
    shell: IPFS_PATH=IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/.ipfs
      IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/ipfs init
  - copy:
      dest: IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/.ipfs/swarm.key
      src: id_secret/swarm.key
  - name: Retrieving Bootstrap's ID
    register: BootstrapID
    shell: 'IPFS_PATH=IPFS_nodes/{{ hostvars[inventory_hostname][''label''] }}/kubo/.ipfs
      IPFS_nodes/{{ hostvars[inventory_hostname][''label''] }}/kubo/ipfs config show
      | grep "PeerID" '
  - name: Delete all bootstraps
    shell: IPFS_PATH=IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/.ipfs
      IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/ipfs bootstrap rm
      --all
  - debug: var=BootstrapID.stdout_lines
    name: Display outputs
  - copy:
      content: '{{ BootstrapID.stdout_lines }}'
      dest: id_secret/bootstrap_id.txt
    delegate_to: localhost
    name: Write output to local file
  - delegate_to: localhost
    name: Format bootstrap ipfs ID
    shell: python3 bootstrap_parser.py {{hostvars[inventory_hostname]['label_ip']}}
  - expect:
      command: rm -f IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/.ipfs/blocks/_README
      responses:
        Question:
        - y
    name: Delete README file that is protected in writing
  - name: Start IPFS dameons
    shell: IPFS_PATH=IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/.ipfs
      nohup IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/ipfs daemon
      --enable-gc >/dev/null 2>&1 &
  - name: Start prometheus node exporter
    shell: nohup python3 IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/node_exporter.py
      {{ hostvars[inventory_hostname]['label'] }} >/dev/null 2>&1 &
- gather_facts: false
  hosts: IPFS-nodes
  tasks:
  - name: Make node folder
    shell: mkdir -p IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}
  - name: Make kubo folder
    shell: mkdir -p IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo
  - copy:
      dest: IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/ipfs
      src: kubo/kubo/ipfs
  - copy:
      dest: IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/node_exporter.py
      src: kubo/node_exporter.py
  - name: Authorize execution of ipfs binary
    shell: chmod u+x IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/ipfs
  - ignore_errors: true
    name: Initialize IPFS node
    shell: IPFS_PATH=IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/.ipfs
      IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/ipfs init
  - copy:
      dest: IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/.ipfs/swarm.key
      src: id_secret/swarm.key
  - name: Delete all bootstraps
    shell: IPFS_PATH=IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/.ipfs
      IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/ipfs bootstrap rm
      --all
  - name: Add bootstrap node
    shell: IPFS_PATH=IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/.ipfs
      IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/ipfs bootstrap add
      {{ bootstrap_id }}
  - expect:
      command: rm -f IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/.ipfs/blocks/_README
      responses:
        Question:
        - y
    name: Delete README file that is protected in writing
  - name: Start IPFS dameons
    shell: IPFS_PATH=IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/.ipfs
      nohup IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/ipfs daemon
      --enable-gc >/dev/null 2>&1 &
  - name: Start prometheus node exporter
    shell: nohup python3 IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/kubo/node_exporter.py
      {{ hostvars[inventory_hostname]['label'] }} >/dev/null 2>&1 &
  vars:
    bootstrap_id: '{{lookup(''file'',''id_secret/bootstrap_id.txt'')}}'
- gather_facts: false
  hosts: IPFScluster-nodes
  tasks:
  - name: Start IPFSCluster daemons
    shell: IPFS_CLUSTER_PATH=IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/ipfs-cluster-service/.ipfs-cluster
      nohup IPFS_nodes/{{ hostvars[inventory_hostname]['label'] }}/ipfs-cluster-service/ipfs-cluster-service
      daemon >/dev/null 2>&1 &
- - gather_facts: false
    hosts: BarteringBootstrap
    tasks:
    - name: Make bartering bootstrap folder
      shell: mkdir -p bartering-bootstrap/
    - copy:
        dest: bartering/
        src: bartering-protocol/bartering-bootstrap
      name: Copy bartering bootstrap binary
    - name: Start bootstrap
      shell: bartering/bartering-bootstrap
- - gather_facts: false
    hosts: BarteringNodes1
    tasks:
    - name: Make bartering folder
      shell: mkdir -p bartering/
    - copy:
        dest: bartering/
        src: bartering-protocol/bartering
      name: Copy bartering binary
    - copy:
        dest: bartering/
        src: bartering-protocol/{{node_type}}/conf.yaml
      name: Copy bartering config file
- - gather_facts: false
    hosts: BarteringNodes2
    tasks:
    - name: Make bartering folder
      shell: mkdir -p bartering/
    - copy:
        dest: bartering/
        src: bartering-protocol/bartering
      name: Copy bartering binary
    - copy:
        dest: bartering/
        src: bartering-protocol/{{node_type}}/conf.yaml
      name: Copy bartering config file
